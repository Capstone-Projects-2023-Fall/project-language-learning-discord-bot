"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[4230],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(t),g=a,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||i;return t?r.createElement(m,o(o({ref:n},l),{},{components:t})):r.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6378:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:2,description:"Documentation"},o=void 0,s={unversionedId:"api-specification/Backend-API-intro",id:"api-specification/Backend-API-intro",title:"Backend-API-intro",description:"Documentation",source:"@site/docs/api-specification/Backend-API-intro.md",sourceDirName:"api-specification",slug:"/api-specification/Backend-API-intro",permalink:"/project-language-learning-discord-bot/docs/api-specification/Backend-API-intro",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-language-learning-discord-bot/edit/main/documentation/docs/api-specification/Backend-API-intro.md",tags:[],version:"current",lastUpdatedBy:"Michael Ewing",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Documentation"},sidebar:"docsSidebar",previous:{title:"Classes",permalink:"/project-language-learning-discord-bot/docs/api-specification/design-api-intro"},next:{title:"Test Procedures",permalink:"/project-language-learning-discord-bot/docs/category/test-procedures"}},c={},p=[{value:"POST /users/create",id:"post-userscreate",level:3},{value:"POST /users/quizzes",id:"post-usersquizzes",level:3},{value:"POST /users/practices",id:"post-userspractices",level:3}],l={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Backend API\n=============================  "),(0,a.kt)("h3",{id:"post-userscreate"},"POST /users/create"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:"),(0,a.kt)("br",{parentName:"p"}),"\n","Create a new user and store it in the database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Valid Request Body:"),"     "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": String,\n  "quizzes": [\n    {\n      "_id": {\n        "$oid": String\n      },\n      "name": String,\n      "score": int,\n      "tookOn": String\n    }\n  ],\n  "totalScore": int\n}\n')),(0,a.kt)("h3",{id:"post-usersquizzes"},"POST /users/quizzes"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:"),(0,a.kt)("br",{parentName:"p"}),"\n","Create a new quiz and store it in the database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Valid Request Body:"),"     "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": {\n    "$oid": String\n  },\n  "name": String,\n  "language": String,\n  "questions": [\n    {\n      "question": String,\n      "answers": [\n        {\n          "answer": String,\n          "isCorrect": String\n        },\n      ]\n    },\n  ]\n}\n')),(0,a.kt)("h3",{id:"post-userspractices"},"POST /users/practices"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:"),(0,a.kt)("br",{parentName:"p"}),"\n","Create a new practice and store it in the database."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Valid Request Body:"),"     "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": {\n    "$oid": String\n  },\n  "name": String,\n  "language": String,\n  "sentences": [\n    {\n      "sentence": String\n    },\n    {\n      "sentence": String\n    }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);