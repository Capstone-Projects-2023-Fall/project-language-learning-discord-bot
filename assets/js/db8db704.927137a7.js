"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7349],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=l.createContext({}),u=function(e){var t=l.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=u(e.components);return l.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(a),d=n,k=m["".concat(o,".").concat(d)]||m[d]||c[d]||r;return a?l.createElement(k,s(s({ref:t},p),{},{components:a})):l.createElement(k,s({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:n,s[1]=i;for(var u=2;u<r;u++)s[u]=a[u];return l.createElement.apply(null,s)}return l.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8614:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var l=a(7462),n=(a(7294),a(3905));const r={sidebar_position:1,description:"Documentation"},s="Classes",i={unversionedId:"api-specification/design-api-intro",id:"api-specification/design-api-intro",title:"Classes",description:"Documentation",source:"@site/docs/api-specification/design-api-intro.md",sourceDirName:"api-specification",slug:"/api-specification/design-api-intro",permalink:"/project-language-learning-discord-bot/docs/api-specification/design-api-intro",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-language-learning-discord-bot/edit/main/documentation/docs/api-specification/design-api-intro.md",tags:[],version:"current",lastUpdatedBy:"Barry Doan",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"Documentation"},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-language-learning-discord-bot/docs/category/api-specification"},next:{title:"Backend-API",permalink:"/project-language-learning-discord-bot/docs/api-specification/Backend-API"}},o={},u=[{value:"Main",id:"main",level:2},{value:"Data Fields:",id:"data-fields",level:3},{value:"Methods:",id:"methods",level:3},{value:"Database",id:"database",level:2},{value:"Class Purpose:",id:"class-purpose",level:3},{value:"Data Fields: None",id:"data-fields-none",level:3},{value:"Methods:",id:"methods-1",level:3},{value:"VocabQuiz",id:"vocabquiz",level:2},{value:"Class Purpose:",id:"class-purpose-1",level:3},{value:"Data Fields: None",id:"data-fields-none-1",level:3},{value:"Methods:",id:"methods-2",level:3},{value:"SpeechRecognition",id:"speechrecognition",level:2},{value:"Class Purpose:",id:"class-purpose-2",level:3},{value:"Data Fields: None",id:"data-fields-none-2",level:3},{value:"Methods:",id:"methods-3",level:3},{value:"HelpCommand",id:"helpcommand",level:2},{value:"Class Purpose:",id:"class-purpose-3",level:3},{value:"Data Fields: None",id:"data-fields-none-3",level:3},{value:"Methods:",id:"methods-4",level:3},{value:"MyScores",id:"myscores",level:2},{value:"Class Purpose:",id:"class-purpose-4",level:3},{value:"Data Fields:",id:"data-fields-1",level:3},{value:"Methods:",id:"methods-5",level:3},{value:"Leaderboard",id:"leaderboard",level:2},{value:"Class Purpose:",id:"class-purpose-5",level:3},{value:"Data Fields:",id:"data-fields-2",level:3},{value:"Methods:",id:"methods-6",level:3},{value:"ChangeLanguage",id:"changelanguage",level:2},{value:"Class Purpose:",id:"class-purpose-6",level:3},{value:"Data Fields:",id:"data-fields-3",level:3},{value:"Methods:",id:"methods-7",level:3},{value:"StartVocabQuiz",id:"startvocabquiz",level:2},{value:"Class Purpose:",id:"class-purpose-7",level:3},{value:"Data Fields:",id:"data-fields-4",level:3},{value:"Methods:",id:"methods-8",level:3},{value:"StartVoiceQuiz",id:"startvoicequiz",level:2},{value:"Class Purpose:",id:"class-purpose-8",level:3},{value:"Data Fields:",id:"data-fields-5",level:3},{value:"Methods:",id:"methods-9",level:3},{value:"Constant",id:"constant",level:2},{value:"Class Purpose:",id:"class-purpose-9",level:3},{value:"Data Fields:",id:"data-fields-6",level:3},{value:"Methods: none",id:"methods-none",level:3},{value:"MatchResult",id:"matchresult",level:2},{value:"Class Purpose:",id:"class-purpose-10",level:3},{value:"Data Fields: None",id:"data-fields-none-4",level:3},{value:"Methods:",id:"methods-10",level:3},{value:"PronounPractice",id:"pronounpractice",level:2},{value:"Class Purpose:",id:"class-purpose-11",level:3},{value:"Data Fields: None",id:"data-fields-none-5",level:3},{value:"Methods:",id:"methods-11",level:3},{value:"PronounTest",id:"pronountest",level:2},{value:"Class Purpose:",id:"class-purpose-12",level:3},{value:"Data Fields:",id:"data-fields-7",level:3},{value:"Methods:",id:"methods-12",level:3},{value:"Test_Database",id:"test_database",level:2},{value:"Class Purpose:",id:"class-purpose-13",level:3},{value:"Data Fields: None",id:"data-fields-none-6",level:3},{value:"Methods:",id:"methods-13",level:3},{value:"Test_HelpCommand",id:"test_helpcommand",level:2},{value:"Class Purpose:",id:"class-purpose-14",level:3},{value:"Data Fields: None",id:"data-fields-none-7",level:3},{value:"Methods:",id:"methods-14",level:3},{value:"Test_Match",id:"test_match",level:2},{value:"Class Purpose:",id:"class-purpose-15",level:3},{value:"Data Fields: None",id:"data-fields-none-8",level:3},{value:"Methods:",id:"methods-15",level:3},{value:"Test_Voice",id:"test_voice",level:2},{value:"Class Purpose:",id:"class-purpose-16",level:3},{value:"Data Fields: None",id:"data-fields-none-9",level:3},{value:"Methods:",id:"methods-16",level:3},{value:"Record",id:"record",level:2},{value:"Class Purpose:",id:"class-purpose-17",level:3},{value:"Data Fields: None",id:"data-fields-none-10",level:3},{value:"Methods:",id:"methods-17",level:3},{value:"TextToSpeech",id:"texttospeech",level:2},{value:"Class Purpose:",id:"class-purpose-18",level:3},{value:"Data Fields: None",id:"data-fields-none-11",level:3},{value:"Methods:",id:"methods-18",level:3},{value:"FillInTheBlanks",id:"fillintheblanks",level:2},{value:"Class Purpose:",id:"class-purpose-19",level:3},{value:"Data Fields: None",id:"data-fields-none-12",level:3},{value:"Methods:",id:"methods-19",level:3},{value:"MyProgress",id:"myprogress",level:2},{value:"Class Purpose:",id:"class-purpose-20",level:3},{value:"Data Fields: None",id:"data-fields-none-13",level:3},{value:"Methods:",id:"methods-20",level:3},{value:"StartFlash",id:"startflash",level:2},{value:"Class Purpose:",id:"class-purpose-21",level:3},{value:"Data Fields: None",id:"data-fields-none-14",level:3},{value:"Methods:",id:"methods-21",level:3},{value:"StartListeningQuiz",id:"startlisteningquiz",level:2},{value:"Class Purpose:",id:"class-purpose-22",level:3},{value:"Data Fields: None",id:"data-fields-none-15",level:3},{value:"Methods:",id:"methods-22",level:3}],p={toc:u};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"classes"},"Classes"),(0,n.kt)("h2",{id:"main"},"Main"),(0,n.kt)("details",{open:"True"},(0,n.kt)("summary",null,"The Main class will start and initialize the bot with its default parameters."),(0,n.kt)("h3",{id:"data-fields"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"bot: An instance of the Discord Bot"),(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the Discord bot is ready. It prints a message to the console and sends a message to a specific channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},'Returns: Prints "Hello, I\'m now online!" string if the channel is active for the bot to enter.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup_hook(): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that loads external commands (cogs) from the 'cogs' directory."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints string of cog commands to the console."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"disconnect(ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Creates a disconnect command with a disconnect button when activated "),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Returns a disconnect command to be used by the user in the discord server."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"main(): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The main entry point for the bot, where it sets up the bot, loads cogs, and starts the bot using asyncio."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},"Returns: None"))))),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"database"},"Database"),(0,n.kt)("h3",{id:"class-purpose"},"Class Purpose:"),(0,n.kt)("p",null,"To create a database of users with data about their performance within a specific language."),(0,n.kt)("h3",{id:"data-fields-none"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-1"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"new"),"(cls):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Ensures that only one instance of the Database class is created."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: cls"),(0,n.kt)("li",{parentName:"ul"},"Returns: An instance of the database via cls.instance"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"initDb(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the database connection and sets up the client, database, and collections."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: none"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success string if the client successfully to the MongoDB"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"readUser(self, username):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reads the user's conditions and determines if the user is valid or not in the database."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: none"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, username"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success string if the client can read the user in the database"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"findUser(self, username):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Finds a user in the database based on the username."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, username"),(0,n.kt)("li",{parentName:"ul"},"Returns: self.userCollection.find_one(query), displays the user if it was found"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"insertUser(self, user): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Inserts a user into the database."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, user"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call of inserting a user into the database"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"changeUserLangauge(self, username, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Updates the user's language preference in the user collection."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, username, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call of changing the language of a user based on their collection ID"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getQuizzes(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Retrieves quizzes based on the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: An array of the quizzes"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getPractices(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Retrieves practices based on the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: An array of practice activities"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getFlashcards(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Retrieves flashcards based on the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: An array of flashcard activities"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getUsrFlashcards(self, unit_choice, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Confirms with the database that it can successfully access a user's flashcard data."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, unit_choice, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: A success string if the database could find a user's flashcard data"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"readProgress(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reads the user's conditions and determines if the user's progress is valid or not in the database."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success string if the client can read the user's progress in the database"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getRandomQuiz(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Selects and returns a random quiz for the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: The specific index (quizzes","[index]",") of the requested quiz"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getRandomPractice(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Selects and returns a random practice for the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: The specific index (practices","[index]",") of the requested practice activity"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"getRandomFlash(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Selects and returns a random flashcard for the specified language."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: The specific index (practices","[index]",") of the requested flashcard activity"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"updateUserQuiz(self, username, quiz):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Updates the user's quiz score in the user collection."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, username, quiz"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call to the database when a specific user score is updated"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"readUserProgress(self, username):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Reads the user's conditions and prints out the user's contents of their progress from the database."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, username"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success string if the client can print the user's progress in the database"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_all_users(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Selects and returns all of the users regardless of language"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: The array of all users"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_random_fill_in_the_blank_set(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Selects and returns a random fill-in-the-blank set of any language"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: The array of all fill-in-the-blank sets")))),(0,n.kt)("h2",{id:"vocabquiz"},"VocabQuiz"),(0,n.kt)("h3",{id:"class-purpose-1"},"Class Purpose:"),(0,n.kt)("p",null,"To generate a customized vocab quiz for the user based on their selected language"),(0,n.kt)("h3",{id:"data-fields-none-1"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-2"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, ctx, user, quiz):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the quiz with context, user, and quiz data."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, user, quiz"),(0,n.kt)("li",{parentName:"ul"},"Returns: None"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_question(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Gets a quiz question"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: True, the ID # of the quiz, and the display of it in the discord UI"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_quiz_info(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Gets quiz information including score."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: Quiz ID #, Quiz Name, Quiz Score, User Token, User Language")))),(0,n.kt)("h2",{id:"speechrecognition"},"SpeechRecognition"),(0,n.kt)("h3",{id:"class-purpose-2"},"Class Purpose:"),(0,n.kt)("p",null,"To show the user and display the result in a text channel and to be interpreted by other functions"),(0,n.kt)("h3",{id:"data-fields-none-2"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-3"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"new"),"(cls):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes a new instance of the user voice input to be generated"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: cls"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successfully developed user instance"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"initAPI(self) -> None:"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes OpenAI to start analyzing user voice input"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call for the recognizer within OpenAI to start"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"speech_to_text(self, filename, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Converts the waveform speech into text"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, filename, language"),(0,n.kt)("li",{parentName:"ul"},"Returns: An array with a transcript of the user voice text")))),(0,n.kt)("h2",{id:"helpcommand"},"HelpCommand"),(0,n.kt)("h3",{id:"class-purpose-3"},"Class Purpose:"),(0,n.kt)("p",null,"To allow the user to use the /help command"),(0,n.kt)("h3",{id:"data-fields-none-3"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-4"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends an instance of the bot to the user"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the cog is ready."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"help(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A command that displays help information as an embedded message in Discord."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Displays all text for the user in the Discord Chat"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds feature to the cogs command archive")))),(0,n.kt)("h2",{id:"myscores"},"MyScores"),(0,n.kt)("h3",{id:"class-purpose-4"},"Class Purpose:"),(0,n.kt)("p",null,"To display the user scores of everyone on a server"),(0,n.kt)("h3",{id:"data-fields-1"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-5"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: An active instance of the bot"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the cog is ready."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A success message to the console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"myScores(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A command that allows the bot to display in the Discord Chat the scores of all users"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, userprompt: str"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call to the database to display user scores"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds feature to the cogs command archive")))),(0,n.kt)("h2",{id:"leaderboard"},"Leaderboard"),(0,n.kt)("h3",{id:"class-purpose-5"},"Class Purpose:"),(0,n.kt)("p",null,"To display the top user scores on a given server"),(0,n.kt)("h3",{id:"data-fields-2"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-6"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: An active instance of the bot"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"leaderboard(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Displays a leaderboard trophy next to the user with the highest score"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: A displayed image to the Discord UI indicating the highest-scored user"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds feature to the cogs command archive")))),(0,n.kt)("h2",{id:"changelanguage"},"ChangeLanguage"),(0,n.kt)("h3",{id:"class-purpose-6"},"Class Purpose:"),(0,n.kt)("p",null,'To allow the user to change its current learning language to any other on the "constant.py" file (either Spanish or French).'),(0,n.kt)("h3",{id:"data-fields-3"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-7"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: An active instance of the bot"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the cog is ready."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A success message to the console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"changeLanguage(self, ctx, userprompt: str):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A command that allows the user to change languages."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, userprompt: str"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful call to the database to alter language"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds feature to the cogs command archive")))),(0,n.kt)("h2",{id:"startvocabquiz"},"StartVocabQuiz"),(0,n.kt)("h3",{id:"class-purpose-7"},"Class Purpose:"),(0,n.kt)("p",null,"To start the vocab quiz practice for a user in a text channel"),(0,n.kt)("h3",{id:"data-fields-4"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-8"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: An active instance of the bot"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the cog is ready."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A success message to the console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"startVocabQuiz(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A command that starts a vocabulary quiz."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends a vocab quiz formatted to the Discord UI for the user to complete"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"startvoicequiz"},"StartVoiceQuiz"),(0,n.kt)("h3",{id:"class-purpose-8"},"Class Purpose:"),(0,n.kt)("p",null,"To start the voice quiz practice for a user in a voice channel"),(0,n.kt)("h3",{id:"data-fields-5"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-9"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: An active instance of the bot"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the cog is ready."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A success message to the console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"startVoiceQuiz(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A command that starts a voice quiz."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends a voice quiz formatted to the Discord UI for the user to complete"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"constant"},"Constant"),(0,n.kt)("h3",{id:"class-purpose-9"},"Class Purpose:"),(0,n.kt)("p",null,"Display all attributes that are considered constants throughout the entire codespace"),(0,n.kt)("h3",{id:"data-fields-6"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"LANGUAGE: What languages are available to the user"),(0,n.kt)("li",{parentName:"ul"},"USER_LANGUAGE: What the user-selected language is"),(0,n.kt)("li",{parentName:"ul"},"USER_TOTALSCORE: What the user's score is"),(0,n.kt)("li",{parentName:"ul"},"USER_QUIZZES: The database array of all the quizzes"),(0,n.kt)("li",{parentName:"ul"},"USER_TOOKON: The user's specific token"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_QUESTIONS: The database array of all the quiz questions"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_QUESTION: The array index of a specific question within a quiz"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_ANSWERS: The database array of all the quiz answers"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_ANSWER: The array index of a specific answer within a quiz"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_ISCORRECT: A boolean on whether a quiz answer was true or false"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_SCORE: An integer on what the user score was after a quiz is completed"),(0,n.kt)("li",{parentName:"ul"},"QUIZ_NAME: The string name of a specific quiz"),(0,n.kt)("li",{parentName:"ul"},"FILL_IN_THE_BLANKS_SET: The string name of the FITB set"),(0,n.kt)("li",{parentName:"ul"},"FILL_IN_THE_BLANKS_QUESTION: The string name of the FITB question"),(0,n.kt)("li",{parentName:"ul"},"FILL_IN_THE_BLANKS_CORRECT_ANSWER: The string answer of the FITB question"),(0,n.kt)("li",{parentName:"ul"},"FILL_IN_THE_BLANKS_CHOICES: The string choices of the FITB choices"),(0,n.kt)("li",{parentName:"ul"},"FILL_IN_THE_BLANKS_ENGLISH_MEANING: The string of the final FITB meaning"),(0,n.kt)("li",{parentName:"ul"},"COLLECTION_ID: The integer ID of a specific user"),(0,n.kt)("li",{parentName:"ul"},'DATE_FORMAT = "%d/%m/%Y %H:%M:%S": The string date format for date-based instances')),(0,n.kt)("h3",{id:"methods-none"},"Methods: none"),(0,n.kt)("h2",{id:"matchresult"},"MatchResult"),(0,n.kt)("h3",{id:"class-purpose-10"},"Class Purpose:"),(0,n.kt)("p",null,"To calculate the number of correct words that a user said during a given pronunciation quiz"),(0,n.kt)("h3",{id:"data-fields-none-4"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-10"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"match_sentence(expected_sentence,actual_sentence):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Calculates the # of correct words in a given pronunciation quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: expected_sentence, actual_sentence"),(0,n.kt)("li",{parentName:"ul"},"Returns: The number of correct words said by the user divided by the length of the expected words in the given phrase"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"highlight_errors(expected_sentence,actual_sentence):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that highlights the errors present in user input within a pronunciation test"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: expected_sentence, actual_sentence"),(0,n.kt)("li",{parentName:"ul"},"Returns: Displays all errors occurring in user input on-screen"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"match_word(word, words):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that sends a boolean if the word is a match or not"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: word, words"),(0,n.kt)("li",{parentName:"ul"},"Returns: True if the user said word is a match")))),(0,n.kt)("h2",{id:"pronounpractice"},"PronounPractice"),(0,n.kt)("h3",{id:"class-purpose-11"},"Class Purpose:"),(0,n.kt)("p",null,"A method that displays the Pronunciation Practice for the user for a given language."),(0,n.kt)("h3",{id:"data-fields-none-5"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-11"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),'(self, ctx, user, practice, textToSpeech, progressId = ""):'),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},'Parameters: self, ctx, user, practice, textToSpeech, progressId = ""'),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"play_sentence(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that played the selected sentence through the current user's voice channel"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successfully plays the text-to-speech audio back to the user"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_question(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that collects a question response from the user's voice input"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: True, the current sentence that the bot displayed for the user and displaying it on the Discord UI"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"once_done(self, sink: discord.sinks, channel: discord.TextChannel, *args):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to scan for user input during a pronunciation quiz to present the next question to the user."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, sink: discord.sinks, channel: discord.TextChannel, *args"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends the next question to the user on the Discord UI")))),(0,n.kt)("h2",{id:"pronountest"},"PronounTest"),(0,n.kt)("h3",{id:"class-purpose-12"},"Class Purpose:"),(0,n.kt)("p",null,"To scan the waveform and parse the user voice input into comparable strings "),(0,n.kt)("h3",{id:"data-fields-7"},"Data Fields:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"database: An instance of the Database class")),(0,n.kt)("h3",{id:"methods-12"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, ctx, user, practice):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, user, practice"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_question(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method that collects a question response from the user's voice input"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: True, the current sentence that the bot displayed for the user and displaying it on the Discord UI"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"once_done(self, sink: discord.sinks, channel: discord.TextChannel, *args):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to scan for user input during a pronunciation quiz to present the next question to the user."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, sink: discord.sinks, channel: discord.TextChannel, *args"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends the next question to the user on the Discord UI"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"get_quiz_info(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to collect all the info for the current quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: returns a full index of the current quiz")))),(0,n.kt)("h2",{id:"test_database"},"Test_Database"),(0,n.kt)("h3",{id:"class-purpose-13"},"Class Purpose:"),(0,n.kt)("p",null,"To test the different attributes of the database"),(0,n.kt)("h3",{id:"data-fields-none-6"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-13"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setUp(self): "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Sets up the database with testing values"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_findUser_not_found(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if a user is not found"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_findUser_found(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if a user is found"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_insertUser(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if a user can be inserted into the database"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_changeLanguage(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if a set language can be changed"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getQuizzes_no_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are no records for a specific quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getQuizzes_has_record(self): "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are records for a specific quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getRandomQuiz_no_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are no records for a random quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getRandomQuiz_has_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are records for a random quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, sink: discord.sinks, channel: discord.TextChannel, *args"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_updateUserQuiz(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if you can update a user-given quiz"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_updateUserQuiz_raise_exception(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if you can update a user-given quiz with an added exception by modification "),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getPractices_no_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are no records from a given practice"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getPractices_has_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are records from a given practice"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getRandomPractice_no_record(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are no records from a random practice"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_getRandomPractice_has_record(self): "),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if there are records from a random practice"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_readUser_throw_exception(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to test if an exception can be thrown when reading a user"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: a successful test case")))),(0,n.kt)("h2",{id:"test_helpcommand"},"Test_HelpCommand"),(0,n.kt)("h3",{id:"class-purpose-14"},"Class Purpose:"),(0,n.kt)("p",null,"To test the different attributes of the help command"),(0,n.kt)("h3",{id:"data-fields-none-7"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-14"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"ping(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To ping the bot to display a help command (in a testing context)"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successful in console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"echo(self, ctx, text: str):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To echo or repeat the current ping to the console"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, text: str"),(0,n.kt)("li",{parentName:"ul"},"Returns: Send successful echo test to the console "))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"bot():"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An initializer method to set a simple instance of the bot and then teardown its global default message"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},"Returns: None"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_ping(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To ping the bot to display a help command (in a testing context)"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successful in console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_echo(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To echo or repeat the current ping to the bot"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Send successful echo test to the bot")))),(0,n.kt)("h2",{id:"test_match"},"Test_Match"),(0,n.kt)("h3",{id:"class-purpose-15"},"Class Purpose:"),(0,n.kt)("p",null,"To test the attributes of the pronunciation test input"),(0,n.kt)("h3",{id:"data-fields-none-8"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-15"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_score(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Tests a given sentence score between two strings"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful score between the two strings"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_score_exactmatch(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Tests a given sentence score between two exact strings"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful score between the two exact strings")))),(0,n.kt)("h2",{id:"test_voice"},"Test_Voice"),(0,n.kt)("h3",{id:"class-purpose-16"},"Class Purpose:"),(0,n.kt)("p",null,"To test the attributes of the user voice input"),(0,n.kt)("h3",{id:"data-fields-none-9"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-16"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"ping(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To ping the bot to start the voice test command"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successful in console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"startVoiceQuiz(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To move to the user voice channel and begin the procedure"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},'Returns: Display a successful message to the user saying "Bot has joined (channel here)"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"bot():"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An initializer method to set a simple instance of the bot and then teardown its global default message"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},"Returns: None"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_ping(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To ping the bot to start the voice command"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successful in console"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_startVoiceQuiz_notinvc(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To test if the user is not in a voice channel to be recorded"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successful in the console that the user isn't in a channel"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"test_startVoiceQuiz_invc(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To test if the user is in a voice channel to be recorded"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Display successfully in the console that the user is in a channel")))),(0,n.kt)("h2",{id:"record"},"Record"),(0,n.kt)("h3",{id:"class-purpose-17"},"Class Purpose:"),(0,n.kt)("p",null,"To record the user voice input and store it as a .wav file in the current instance"),(0,n.kt)("h3",{id:"data-fields-none-10"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-17"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"once_done(sink: discord.sinks, channel: discord.TextChannel, *args):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"A method to verify that voice input from the user is all collected"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: sink: discord.sinks, channel: discord.TextChannel, *args"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successful print message to the discord UI saying that message has been recorded and verified"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"record(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Records the user voice as an input to be analyzed and collected"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: A successful print message saying that the bot has started recording"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"stop(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"To stop the recording and send it to other functions to be analyzed"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Sends successful response call to once_done() method above for verification"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"texttospeech"},"TextToSpeech"),(0,n.kt)("h3",{id:"class-purpose-18"},"Class Purpose:"),(0,n.kt)("p",null,"To activate the text-to-speech for a given text (regardless of language) to be audited to the user."),(0,n.kt)("h3",{id:"data-fields-none-11"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-18"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, language):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the method with a reference to all possible language output."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, language"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the method with pre-assigned languages like "English"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"text_to_speech(self, text):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Activates the Google gTTS instance of that text given to the user"),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, text"),(0,n.kt)("li",{parentName:"ul"},'Returns: A successful save of the TTS recording saved to "audios/voice.mp3"')))),(0,n.kt)("h2",{id:"fillintheblanks"},"FillInTheBlanks"),(0,n.kt)("h3",{id:"class-purpose-19"},"Class Purpose:"),(0,n.kt)("p",null,"To generate the Fill-in-the-blank activity for the user to interact with via the bot."),(0,n.kt)("h3",{id:"data-fields-none-12"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-19"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the Discord bot is ready. It prints a message to the console and sends a message to a specific channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},'Returns: Prints "Hello, I\'m now online!" string if the channel is active for the bot to enter.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"fill_in_the_blanks(self, ctx, *, language: str = None):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Presents the fill-in-the-blanks ordered question to the user in the current discord text channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx, *, language: str = None"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successfully prints to the user's current text channel"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"myprogress"},"MyProgress"),(0,n.kt)("h3",{id:"class-purpose-20"},"Class Purpose:"),(0,n.kt)("p",null,"To generate the current progression for a specific user."),(0,n.kt)("h3",{id:"data-fields-none-13"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-20"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(): void"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the Discord bot is ready. It prints a message to the console and sends a message to a specific channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: None"),(0,n.kt)("li",{parentName:"ul"},'Returns: Prints "MyProgress command is online." string if the channel is active for the bot to enter.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"myProgress(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Presents the current progress in the language course for a user."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successfully prints the user's current progress of the course within their text channel"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"startflash"},"StartFlash"),(0,n.kt)("h3",{id:"class-purpose-21"},"Class Purpose:"),(0,n.kt)("p",null,"To generate the Flashcard activity for the user to interact with via the bot."),(0,n.kt)("h3",{id:"data-fields-none-14"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-21"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the Discord bot is ready. It prints a message to the console and sends a message to a specific channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},'Returns: Prints "MyProgress command is online." string if the channel is active for the bot to enter.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"startFlash(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Presents the flashcard activity for a user in their current text channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successfully prints the user's current progress of the course within their text channel"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))),(0,n.kt)("h2",{id:"startlisteningquiz"},"StartListeningQuiz"),(0,n.kt)("h3",{id:"class-purpose-22"},"Class Purpose:"),(0,n.kt)("p",null,"To generate the Listening Quiz activity for the user to interact with via the bot."),(0,n.kt)("h3",{id:"data-fields-none-15"},"Data Fields: None"),(0,n.kt)("h3",{id:"methods-22"},"Methods:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"init"),"(self, bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Initializes the cog with a reference to the bot."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, bot"),(0,n.kt)("li",{parentName:"ul"},'Returns: a setup instance of the bot with pre-assigned values aka "self"'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"on_ready(self):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"An event handler called when the Discord bot is ready. It prints a message to the console and sends a message to a specific channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self"),(0,n.kt)("li",{parentName:"ul"},'Returns: Prints "MyProgress command is online." string if the channel is active for the bot to enter.'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"startListeningQuiz(self, ctx):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Presents the listening quiz activity for a user in their current text channel."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: self, ctx"),(0,n.kt)("li",{parentName:"ul"},"Returns: Successfully presents the listening quiz activity to the user"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"setup(bot):"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Internal method for setting up the cog."),(0,n.kt)("li",{parentName:"ul"},"Pre-conditions: None"),(0,n.kt)("li",{parentName:"ul"},"Parameters: bot"),(0,n.kt)("li",{parentName:"ul"},"Returns: Prints a success message to the console and adds the feature to the cogs command archive")))))}m.isMDXComponent=!0}}]);