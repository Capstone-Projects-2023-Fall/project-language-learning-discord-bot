"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7349],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,h=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return t?o.createElement(h,i(i({ref:n},l),{},{components:t})):o.createElement(h,i({ref:n},l))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var d=2;d<a;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8614:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var o=t(7462),r=(t(7294),t(3905));const a={sidebar_position:1,description:"What should be in this section."},i="Design Document - Part II API",s={unversionedId:"api-specification/design-api-intro",id:"api-specification/design-api-intro",title:"Design Document - Part II API",description:"What should be in this section.",source:"@site/docs/api-specification/design-api-intro.md",sourceDirName:"api-specification",slug:"/api-specification/design-api-intro",permalink:"/project-language-learning-discord-bot/docs/api-specification/design-api-intro",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Fall/project-language-learning-discord-bot/edit/main/documentation/docs/api-specification/design-api-intro.md",tags:[],version:"current",lastUpdatedBy:"Harsh Patel",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"What should be in this section."},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-language-learning-discord-bot/docs/category/api-specification"},next:{title:"API 1 - Swagger Petstore",permalink:"/project-language-learning-discord-bot/docs/api-specification/openapi-spec"}},c={},d=[{value:"Main",id:"main",level:2},{value:"Database",id:"database",level:2},{value:"VocabQuiz",id:"vocabquiz",level:2},{value:"JoinVoice",id:"joinvoice",level:2},{value:"HelpCommand",id:"helpcommand",level:2},{value:"ChangeLanguage",id:"changelanguage",level:2},{value:"StartVocabQuiz",id:"startvocabquiz",level:2}],l={toc:d};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"design-document---part-ii-api"},"Design Document - Part II API"),(0,r.kt)("h2",{id:"main"},"Main"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: The Main class will start and initalize the bot with it's default parameters.\n\nData Fields: None\n\nMethods:\n  - on_ready(): void\n      - Inital bot event when bot enters discord server with assigned displayed message.\n      - Pre-conditions: None\n      - Parameters: None\n      - Returns: None\n\n  - setup_hook(): void\n      - Loads all the cogs (external commands organized in classes).\n      - Pre-conditions: None\n      - Parameters: None\n      - Returns: None\n\n  - main(): void\n      - Runs the bot with above methods\n      - Pre-conditions: None\n      - Parameters: None\n      - Returns: None\n")),(0,r.kt)("h2",{id:"database"},"Database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To create a database of users with data about their performance within a specific langauge.\n\nData Fields: None\n\nMethods:\n    - __new__(): void\n        - Creates a new instance of a user in the database\n        - Pre-conditions: None\n        - Parameters: cls\n        - Returns: cls.instance\n\n    - initDb(): void\n        - Initalizes the Mongo DB and replies to user if database was successful or not in starting sequence\n        - Pre-conditions: none\n        - Parameters: self\n        - Returns: none\n\n    - findUser(): void\n        - Command to find a username of current user within database\n        - Pre-conditions: None\n        - Parameters: self, username\n        - Returns: self.userCollection.find_one(query), displays the user if it was found\n\n    - insertUser(): void\n        - Command to insert a user into the Mongo database\n        - Pre-conditions: None\n        - Parameters: self, user\n        - Returns: none\n\n    - changeUserLangauge(): void\n        - Command to change user language\n        - Pre-conditions: None\n        - Parameters: self, username, language\n        - Returns: none\n\n    - getQuizzees(): void\n        - Method to collect all quizzes from the user specified language\n        - Pre-conditions: None\n        - Parameters: self, language\n        - Returns: quizzes\n\n    - getRandomQuiz(): void\n        - Method to get a random quiz from the array\n        - Pre-conditions: None\n        - Parameters: self, language\n        - Returns: quizzes[index]\n\n    - updateUserQuiz(): void\n        - Method to update the user quiz status in their dbuser database\n        - Pre-conditions: None\n        - Parameters: self, username, quiz\n        - Returns: none\n")),(0,r.kt)("h2",{id:"vocabquiz"},"VocabQuiz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To generate a customized \n\nData Fields: None\n\nMethods:\n    - __init__(): void\n        - Constructor to create bot object\n        - Pre-conditions: None\n        - Parameters: self, ctx, user, quiz\n        - Returns: None\n\n    - get_question(): void\n        - Method to collect all questions and their respective answers from the user\n        - Pre-conditions: None\n        - Parameters: self\n        - Returns: True or False\n\n    - button_callback_true(): void\n        - Method to test to if user has selected the correct answer their quiz and if so then display their results\n        - Pre-conditions: None\n        - Parameters: interaction\n        - Returns: none\n\n    - button_callback_false(): void\n        - Method to test to if user has selected the wrong answer their quiz and if so then display their results\n        - Pre-conditions: None\n        - Parameters: interaction\n        - Returns: none\n\n    - get_quiz_info(): void\n        - Method to collect final quiz data and store it in user's database\n        - Pre-conditions: None\n        - Parameters: self\n        - Returns: none\n")),(0,r.kt)("h2",{id:"joinvoice"},"JoinVoice"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To allow the discord bot to enter into the voice channel of the current user\n\nData Fields: None\n\nMethods:\n    - __init__(): void\n        - Constructor to create bot object\n        - Pre-conditions: None\n        - Parameters: None\n        - Returns: None\n\n    - startVoiceQuiz(): void\n        - Command to start Voice Quiz for the specific user in said voice channel\n        - Pre-conditions: None\n        - Parameters: self, ctx\n        - Returns: None\n")),(0,r.kt)("h2",{id:"helpcommand"},"HelpCommand"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To allow the user to use the /help command\n\nData Fields: None\n\nMethods:\n    - __init__(): void\n        - Constructor to create bot object\n        - Pre-conditions: None\n        - Parameters: self, bot\n        - Returns: None\n\n    - on_ready(): void\n        - To display a debug message to Cogs to confirm it's working\n        - Pre-conditions: None\n        - Parameters: self\n        - Returns: None\n\n    - help(): void\n        - To display to the user the contents of the help command\n        - Pre-conditions: None\n        - Parameters: self, ctx\n        - Returns: None\n")),(0,r.kt)("h2",{id:"changelanguage"},"ChangeLanguage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To allow the user to change it's current learning language to any other on the \"constant.py\" file (either Spanish or French).\n\nData Fields: None\n\nMethods:\n    - __init__(): void\n        - Constructor to create bot object\n        - Pre-conditions: None\n        - Parameters: self, bot\n        - Returns: None\n\n    - on_ready(): void\n        - To display a debug message to Cogs to confirm it's working\n        - Pre-conditions: None\n        - Parameters: self\n        - Returns: None\n\n    - changeLanguage(): void\n        - To change the default language in the user's current datbase entry\n        - Pre-conditions: None\n        - Parameters: self, ctx, userprompt: str\n        - Returns: None\n")),(0,r.kt)("h2",{id:"startvocabquiz"},"StartVocabQuiz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Class Purpose: To start the vocab quiz practice for a user in a text channel\n\nData Fields: None\n\nMethods:\n    - __init__(): void\n        - Constructor to create bot object\n        - Pre-conditions: None\n        - Parameters: self, bot\n        - Returns: None\n\n    - on_ready(): void\n        - To display a debug message to Cogs to confirm it's working\n        - Pre-conditions: None\n        - Parameters: self\n        - Returns: None\n\n    - startVocabQuiz(): void\n        - Method to find the user in the database and start process of associating all vocab quiz content to them on completion\n        - Pre-conditions: None\n        - Parameters: self, ctx\n        - Returns: None\n")))}u.isMDXComponent=!0}}]);